!function(t,e){"object"==typeof exports&&"undefined"!=typeof module?module.exports=e():"function"==typeof define&&define.amd?define(e):(t=t||self).Front=e()}(this,(function(){"use strict";
/*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(e,n)};function e(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}var n=function(){return(n=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var o in e=arguments[n])Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o]);return t}).apply(this,arguments)};function r(t,e,n,r){return new(n||(n=Promise))((function(o,i){function s(t){try{c(r.next(t))}catch(t){i(t)}}function u(t){try{c(r.throw(t))}catch(t){i(t)}}function c(t){t.done?o(t.value):new n((function(e){e(t.value)})).then(s,u)}c((r=r.apply(t,e||[])).next())}))}function o(t,e){var n,r,o,i,s={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:u(0),throw:u(1),return:u(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function u(i){return function(u){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;s;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return s.label++,{value:i[1],done:!1};case 5:s.label++,r=i[1],i=[0];continue;case 7:i=s.ops.pop(),s.trys.pop();continue;default:if(!(o=(o=s.trys).length>0&&o[o.length-1])&&(6===i[0]||2===i[0])){s=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){s.label=i[1];break}if(6===i[0]&&s.label<o[1]){s.label=o[1],o=i;break}if(o&&s.label<o[2]){s.label=o[2],s.ops.push(i);break}o[2]&&s.ops.pop(),s.trys.pop();continue}i=e.call(t,s)}catch(t){i=[6,t],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,u])}}}var i="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:{};function s(t){return t&&t.__esModule&&Object.prototype.hasOwnProperty.call(t,"default")?t.default:t}function u(t,e){return t(e={exports:{}},e.exports),e.exports}var c=u((function(t,e){var n=i&&i.__extends||function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])})(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}();Object.defineProperty(e,"__esModule",{value:!0}),e.ApplicationDefaultError=e.ApplicationError=void 0;var r=function(t){function e(e){var n=this.constructor,r=t.call(this,e)||this,o=n.prototype;return Object.setPrototypeOf(r,o),r}return n(e,t),e}(Error);e.ApplicationError=r;var o=function(t){function e(e){var n=t.call(this,"Something went wrong.")||this;return n.originalError=e,n}return n(e,t),e}(r);e.ApplicationDefaultError=o}));s(c);c.ApplicationDefaultError,c.ApplicationError;var a=u((function(t,e){var n=i&&i.__extends||function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])})(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}();Object.defineProperty(e,"__esModule",{value:!0}),e.buildApplicationCancelTokenSource=e.ApplicationCancelError=void 0;var r=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return n(e,t),e}(c.ApplicationError);e.ApplicationCancelError=r,e.buildApplicationCancelTokenSource=function(){var t=null,e=!1;return{cancel:function(n){if(!t)throw new Error("Promise initialization failed");e=!0,t({message:n||"The process was cancelled."})},token:{promise:new Promise((function(e){t=e})),throwIfRequested:function(){if(e)throw new r}}}}}));s(a);a.buildApplicationCancelTokenSource,a.ApplicationCancelError;var l=u((function(t,e){Object.defineProperty(e,"__esModule",{value:!0})}));s(l);var f=u((function(t,e){Object.defineProperty(e,"__esModule",{value:!0})}));s(f);var p=u((function(t,e){Object.defineProperty(e,"__esModule",{value:!0})}));s(p);var h=u((function(t,e){Object.defineProperty(e,"__esModule",{value:!0})}));s(h);var d=u((function(t,e){Object.defineProperty(e,"__esModule",{value:!0}),e.EntryPointTypesEnum=void 0,function(t){t.CONVERSATION_LINK_DROPDOWN="CONVERSATION_LINK_DROPDOWN",t.MESSAGE_MORE_DROPDOWN="MESSAGE_MORE_DROPDOWN",t.SIDE_PANEL="SIDE_PANEL"}(e.EntryPointTypesEnum||(e.EntryPointTypesEnum={}))}));s(d);d.EntryPointTypesEnum;var b=u((function(t,e){Object.defineProperty(e,"__esModule",{value:!0}),e.ApplicationAuthenticationStatusesEnum=void 0,function(t){t.AUTHORIZED="authorized"}(e.ApplicationAuthenticationStatusesEnum||(e.ApplicationAuthenticationStatusesEnum={}))}));s(b);b.ApplicationAuthenticationStatusesEnum;var y=u((function(t,e){Object.defineProperty(e,"__esModule",{value:!0})}));s(y);var v=u((function(t,e){Object.defineProperty(e,"__esModule",{value:!0})}));s(v);var _=u((function(t,e){Object.defineProperty(e,"__esModule",{value:!0}),e.HttpVerbsEnum=void 0,function(t){t.GET="GET",t.POST="POST",t.PUT="PUT",t.PATCH="PATCH",t.DELETE="DELETE"}(e.HttpVerbsEnum||(e.HttpVerbsEnum={}))}));s(_);_.HttpVerbsEnum;var w=u((function(t,e){Object.defineProperty(e,"__esModule",{value:!0})}));s(w);var E=u((function(t,e){Object.defineProperty(e,"__esModule",{value:!0})}));s(E);var g=u((function(t,e){Object.defineProperty(e,"__esModule",{value:!0})}));s(g);var m=u((function(t,e){Object.defineProperty(e,"__esModule",{value:!0})}));s(m);var O=u((function(t,e){Object.defineProperty(e,"__esModule",{value:!0})}));s(O);var S=u((function(t,e){Object.defineProperty(e,"__esModule",{value:!0})}));s(S);var T=u((function(t,e){Object.defineProperty(e,"__esModule",{value:!0})}));s(T);var x=u((function(t,e){Object.defineProperty(e,"__esModule",{value:!0})}));s(x);var P=u((function(t,e){Object.defineProperty(e,"__esModule",{value:!0})}));s(P);var j=u((function(t,e){Object.defineProperty(e,"__esModule",{value:!0}),e.WidgetTypesEnum=void 0,function(t){t.BLOCK="BLOCK",t.LAYER="LAYER"}(e.WidgetTypesEnum||(e.WidgetTypesEnum={}))}));s(j);j.WidgetTypesEnum;var A=u((function(t,e){var n=i&&i.__createBinding||(Object.create?function(t,e,n,r){void 0===r&&(r=n),Object.defineProperty(t,r,{enumerable:!0,get:function(){return e[n]}})}:function(t,e,n,r){void 0===r&&(r=n),t[r]=e[n]}),r=i&&i.__exportStar||function(t,e){for(var r in t)"default"===r||Object.prototype.hasOwnProperty.call(e,r)||n(e,t,r)};Object.defineProperty(e,"__esModule",{value:!0}),e.getBridge=void 0,e.getBridge=function(){return window.buildBridge("2.0.0")},r(a,e),r(l,e),r(f,e),r(p,e),r(h,e),r(b,e),r(y,e),r(v,e),r(d,e),r(c,e),r(_,e),r(w,e),r(E,e),r(g,e),r(m,e),r(O,e),r(S,e),r(T,e),r(x,e),r(P,e),r(j,e)}));s(A);var N,C=A.ApplicationCancelError,M=A.buildApplicationCancelTokenSource,I=(A.ApplicationCancelToken,A.getBridge,function(t,e){var n="000000000"+t;return n.substr(n.length-e)}),D="object"==typeof window?window:self,k=Object.keys(D).length,L=navigator.mimeTypes?navigator.mimeTypes.length:0,R=I((L+navigator.userAgent.length).toString(36)+k.toString(36),4),U=function(){return R},H="undefined"!=typeof window&&(window.crypto||window.msCrypto)||"undefined"!=typeof self&&self.crypto;if(H){var F=Math.pow(2,32)-1;N=function(){return Math.abs(H.getRandomValues(new Uint32Array(1))[0]/F)}}else N=Math.random;var V=N,W=0,Y=Math.pow(36,4);function B(){return I((V()*Y<<0).toString(36),4)}function G(){return W=W<Y?W:0,++W-1}function z(){return"c"+(new Date).getTime().toString(36)+I(G().toString(36),4)+U()+(B()+B())}z.slug=function(){var t=(new Date).getTime().toString(36),e=G().toString(36).slice(-4),n=U().slice(0,1)+U().slice(-1),r=B().slice(-2);return t.slice(-2)+e+n+r},z.isCuid=function(t){return"string"==typeof t&&!!t.startsWith("c")},z.isSlug=function(t){if("string"!=typeof t)return!1;var e=t.length;return e>=7&&e<=10},z.fingerprint=U;var q=z;function K(t){return"function"==typeof t}var X=!1,Z={Promise:void 0,set useDeprecatedSynchronousErrorHandling(t){t&&(new Error).stack;X=t},get useDeprecatedSynchronousErrorHandling(){return X}};function J(t){setTimeout((function(){throw t}),0)}var Q={closed:!0,next:function(t){},error:function(t){if(Z.useDeprecatedSynchronousErrorHandling)throw t;J(t)},complete:function(){}},$=function(){return Array.isArray||function(t){return t&&"number"==typeof t.length}}();var tt=function(){function t(t){return Error.call(this),this.message=t?t.length+" errors occurred during unsubscription:\n"+t.map((function(t,e){return e+1+") "+t.toString()})).join("\n  "):"",this.name="UnsubscriptionError",this.errors=t,this}return t.prototype=Object.create(Error.prototype),t}(),et=function(){function t(t){this.closed=!1,this._parentOrParents=null,this._subscriptions=null,t&&(this._unsubscribe=t)}return t.prototype.unsubscribe=function(){var e;if(!this.closed){var n,r=this._parentOrParents,o=this._unsubscribe,i=this._subscriptions;if(this.closed=!0,this._parentOrParents=null,this._subscriptions=null,r instanceof t)r.remove(this);else if(null!==r)for(var s=0;s<r.length;++s){r[s].remove(this)}if(K(o))try{o.call(this)}catch(t){e=t instanceof tt?nt(t.errors):[t]}if($(i)){s=-1;for(var u=i.length;++s<u;){var c=i[s];if(null!==(n=c)&&"object"==typeof n)try{c.unsubscribe()}catch(t){e=e||[],t instanceof tt?e=e.concat(nt(t.errors)):e.push(t)}}}if(e)throw new tt(e)}},t.prototype.add=function(e){var n=e;if(!e)return t.EMPTY;switch(typeof e){case"function":n=new t(e);case"object":if(n===this||n.closed||"function"!=typeof n.unsubscribe)return n;if(this.closed)return n.unsubscribe(),n;if(!(n instanceof t)){var r=n;(n=new t)._subscriptions=[r]}break;default:throw new Error("unrecognized teardown "+e+" added to Subscription.")}var o=n._parentOrParents;if(null===o)n._parentOrParents=this;else if(o instanceof t){if(o===this)return n;n._parentOrParents=[o,this]}else{if(-1!==o.indexOf(this))return n;o.push(this)}var i=this._subscriptions;return null===i?this._subscriptions=[n]:i.push(n),n},t.prototype.remove=function(t){var e=this._subscriptions;if(e){var n=e.indexOf(t);-1!==n&&e.splice(n,1)}},t.EMPTY=function(t){return t.closed=!0,t}(new t),t}();function nt(t){return t.reduce((function(t,e){return t.concat(e instanceof tt?e.errors:e)}),[])}var rt=function(){return"function"==typeof Symbol?Symbol("rxSubscriber"):"@@rxSubscriber_"+Math.random()}(),ot=function(t){function n(e,r,o){var i=t.call(this)||this;switch(i.syncErrorValue=null,i.syncErrorThrown=!1,i.syncErrorThrowable=!1,i.isStopped=!1,arguments.length){case 0:i.destination=Q;break;case 1:if(!e){i.destination=Q;break}if("object"==typeof e){e instanceof n?(i.syncErrorThrowable=e.syncErrorThrowable,i.destination=e,e.add(i)):(i.syncErrorThrowable=!0,i.destination=new it(i,e));break}default:i.syncErrorThrowable=!0,i.destination=new it(i,e,r,o)}return i}return e(n,t),n.prototype[rt]=function(){return this},n.create=function(t,e,r){var o=new n(t,e,r);return o.syncErrorThrowable=!1,o},n.prototype.next=function(t){this.isStopped||this._next(t)},n.prototype.error=function(t){this.isStopped||(this.isStopped=!0,this._error(t))},n.prototype.complete=function(){this.isStopped||(this.isStopped=!0,this._complete())},n.prototype.unsubscribe=function(){this.closed||(this.isStopped=!0,t.prototype.unsubscribe.call(this))},n.prototype._next=function(t){this.destination.next(t)},n.prototype._error=function(t){this.destination.error(t),this.unsubscribe()},n.prototype._complete=function(){this.destination.complete(),this.unsubscribe()},n.prototype._unsubscribeAndRecycle=function(){var t=this._parentOrParents;return this._parentOrParents=null,this.unsubscribe(),this.closed=!1,this.isStopped=!1,this._parentOrParents=t,this},n}(et),it=function(t){function n(e,n,r,o){var i,s=t.call(this)||this;s._parentSubscriber=e;var u=s;return K(n)?i=n:n&&(i=n.next,r=n.error,o=n.complete,n!==Q&&(K((u=Object.create(n)).unsubscribe)&&s.add(u.unsubscribe.bind(u)),u.unsubscribe=s.unsubscribe.bind(s))),s._context=u,s._next=i,s._error=r,s._complete=o,s}return e(n,t),n.prototype.next=function(t){if(!this.isStopped&&this._next){var e=this._parentSubscriber;Z.useDeprecatedSynchronousErrorHandling&&e.syncErrorThrowable?this.__tryOrSetError(e,this._next,t)&&this.unsubscribe():this.__tryOrUnsub(this._next,t)}},n.prototype.error=function(t){if(!this.isStopped){var e=this._parentSubscriber,n=Z.useDeprecatedSynchronousErrorHandling;if(this._error)n&&e.syncErrorThrowable?(this.__tryOrSetError(e,this._error,t),this.unsubscribe()):(this.__tryOrUnsub(this._error,t),this.unsubscribe());else if(e.syncErrorThrowable)n?(e.syncErrorValue=t,e.syncErrorThrown=!0):J(t),this.unsubscribe();else{if(this.unsubscribe(),n)throw t;J(t)}}},n.prototype.complete=function(){var t=this;if(!this.isStopped){var e=this._parentSubscriber;if(this._complete){var n=function(){return t._complete.call(t._context)};Z.useDeprecatedSynchronousErrorHandling&&e.syncErrorThrowable?(this.__tryOrSetError(e,n),this.unsubscribe()):(this.__tryOrUnsub(n),this.unsubscribe())}else this.unsubscribe()}},n.prototype.__tryOrUnsub=function(t,e){try{t.call(this._context,e)}catch(t){if(this.unsubscribe(),Z.useDeprecatedSynchronousErrorHandling)throw t;J(t)}},n.prototype.__tryOrSetError=function(t,e,n){if(!Z.useDeprecatedSynchronousErrorHandling)throw new Error("bad call");try{e.call(this._context,n)}catch(e){return Z.useDeprecatedSynchronousErrorHandling?(t.syncErrorValue=e,t.syncErrorThrown=!0,!0):(J(e),!0)}return!1},n.prototype._unsubscribe=function(){var t=this._parentSubscriber;this._context=null,this._parentSubscriber=null,t.unsubscribe()},n}(ot);var st=function(){return"function"==typeof Symbol&&Symbol.observable||"@@observable"}();function ut(){}function ct(t){return t?1===t.length?t[0]:function(e){return t.reduce((function(t,e){return e(t)}),e)}:ut}var at=function(){function t(t){this._isScalar=!1,t&&(this._subscribe=t)}return t.prototype.lift=function(e){var n=new t;return n.source=this,n.operator=e,n},t.prototype.subscribe=function(t,e,n){var r=this.operator,o=function(t,e,n){if(t){if(t instanceof ot)return t;if(t[rt])return t[rt]()}return t||e||n?new ot(t,e,n):new ot(Q)}(t,e,n);if(r?o.add(r.call(o,this.source)):o.add(this.source||Z.useDeprecatedSynchronousErrorHandling&&!o.syncErrorThrowable?this._subscribe(o):this._trySubscribe(o)),Z.useDeprecatedSynchronousErrorHandling&&o.syncErrorThrowable&&(o.syncErrorThrowable=!1,o.syncErrorThrown))throw o.syncErrorValue;return o},t.prototype._trySubscribe=function(t){try{return this._subscribe(t)}catch(e){Z.useDeprecatedSynchronousErrorHandling&&(t.syncErrorThrown=!0,t.syncErrorValue=e),!function(t){for(;t;){var e=t,n=e.closed,r=e.destination,o=e.isStopped;if(n||o)return!1;t=r&&r instanceof ot?r:null}return!0}(t)?console.warn(e):t.error(e)}},t.prototype.forEach=function(t,e){var n=this;return new(e=lt(e))((function(e,r){var o;o=n.subscribe((function(e){try{t(e)}catch(t){r(t),o&&o.unsubscribe()}}),r,e)}))},t.prototype._subscribe=function(t){var e=this.source;return e&&e.subscribe(t)},t.prototype[st]=function(){return this},t.prototype.pipe=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return 0===t.length?this:ct(t)(this)},t.prototype.toPromise=function(t){var e=this;return new(t=lt(t))((function(t,n){var r;e.subscribe((function(t){return r=t}),(function(t){return n(t)}),(function(){return t(r)}))}))},t.create=function(e){return new t(e)},t}();function lt(t){if(t||(t=Promise),!t)throw new Error("no Promise impl found");return t}var ft=function(){function t(){return Error.call(this),this.message="object unsubscribed",this.name="ObjectUnsubscribedError",this}return t.prototype=Object.create(Error.prototype),t}(),pt=function(t){function n(e,n){var r=t.call(this)||this;return r.subject=e,r.subscriber=n,r.closed=!1,r}return e(n,t),n.prototype.unsubscribe=function(){if(!this.closed){this.closed=!0;var t=this.subject,e=t.observers;if(this.subject=null,e&&0!==e.length&&!t.isStopped&&!t.closed){var n=e.indexOf(this.subscriber);-1!==n&&e.splice(n,1)}}},n}(et),ht=function(t){function n(e){var n=t.call(this,e)||this;return n.destination=e,n}return e(n,t),n}(ot),dt=function(t){function n(){var e=t.call(this)||this;return e.observers=[],e.closed=!1,e.isStopped=!1,e.hasError=!1,e.thrownError=null,e}return e(n,t),n.prototype[rt]=function(){return new ht(this)},n.prototype.lift=function(t){var e=new bt(this,this);return e.operator=t,e},n.prototype.next=function(t){if(this.closed)throw new ft;if(!this.isStopped)for(var e=this.observers,n=e.length,r=e.slice(),o=0;o<n;o++)r[o].next(t)},n.prototype.error=function(t){if(this.closed)throw new ft;this.hasError=!0,this.thrownError=t,this.isStopped=!0;for(var e=this.observers,n=e.length,r=e.slice(),o=0;o<n;o++)r[o].error(t);this.observers.length=0},n.prototype.complete=function(){if(this.closed)throw new ft;this.isStopped=!0;for(var t=this.observers,e=t.length,n=t.slice(),r=0;r<e;r++)n[r].complete();this.observers.length=0},n.prototype.unsubscribe=function(){this.isStopped=!0,this.closed=!0,this.observers=null},n.prototype._trySubscribe=function(e){if(this.closed)throw new ft;return t.prototype._trySubscribe.call(this,e)},n.prototype._subscribe=function(t){if(this.closed)throw new ft;return this.hasError?(t.error(this.thrownError),et.EMPTY):this.isStopped?(t.complete(),et.EMPTY):(this.observers.push(t),new pt(this,t))},n.prototype.asObservable=function(){var t=new at;return t.source=this,t},n.create=function(t,e){return new bt(t,e)},n}(at),bt=function(t){function n(e,n){var r=t.call(this)||this;return r.destination=e,r.source=n,r}return e(n,t),n.prototype.next=function(t){var e=this.destination;e&&e.next&&e.next(t)},n.prototype.error=function(t){var e=this.destination;e&&e.error&&this.destination.error(t)},n.prototype.complete=function(){var t=this.destination;t&&t.complete&&this.destination.complete()},n.prototype._subscribe=function(t){return this.source?this.source.subscribe(t):et.EMPTY},n}(dt);var yt=function(){function t(t){this.connectable=t}return t.prototype.call=function(t,e){var n=this.connectable;n._refCount++;var r=new vt(t,n),o=e.subscribe(r);return r.closed||(r.connection=n.connect()),o},t}(),vt=function(t){function n(e,n){var r=t.call(this,e)||this;return r.connectable=n,r}return e(n,t),n.prototype._unsubscribe=function(){var t=this.connectable;if(t){this.connectable=null;var e=t._refCount;if(e<=0)this.connection=null;else if(t._refCount=e-1,e>1)this.connection=null;else{var n=this.connection,r=t._connection;this.connection=null,!r||n&&r!==n||r.unsubscribe()}}else this.connection=null},n}(ot),_t=function(t){function n(e,n){var r=t.call(this)||this;return r.source=e,r.subjectFactory=n,r._refCount=0,r._isComplete=!1,r}return e(n,t),n.prototype._subscribe=function(t){return this.getSubject().subscribe(t)},n.prototype.getSubject=function(){var t=this._subject;return t&&!t.isStopped||(this._subject=this.subjectFactory()),this._subject},n.prototype.connect=function(){var t=this._connection;return t||(this._isComplete=!1,(t=this._connection=new et).add(this.source.subscribe(new Et(this.getSubject(),this))),t.closed&&(this._connection=null,t=et.EMPTY)),t},n.prototype.refCount=function(){return(t=this).lift(new yt(t));var t},n}(at),wt=function(){var t=_t.prototype;return{operator:{value:null},_refCount:{value:0,writable:!0},_subject:{value:null,writable:!0},_connection:{value:null,writable:!0},_subscribe:{value:t._subscribe},_isComplete:{value:t._isComplete,writable:!0},getSubject:{value:t.getSubject},connect:{value:t.connect},refCount:{value:t.refCount}}}(),Et=function(t){function n(e,n){var r=t.call(this,e)||this;return r.connectable=n,r}return e(n,t),n.prototype._error=function(e){this._unsubscribe(),t.prototype._error.call(this,e)},n.prototype._complete=function(){this.connectable._isComplete=!0,this._unsubscribe(),t.prototype._complete.call(this)},n.prototype._unsubscribe=function(){var t=this.connectable;if(t){this.connectable=null;var e=t._connection;t._refCount=0,t._subject=null,t._connection=null,e&&e.unsubscribe()}},n}(ht),gt=function(t){function n(e,n){var r=t.call(this,e,n)||this;return r.scheduler=e,r.work=n,r}return e(n,t),n.prototype.schedule=function(e,n){return void 0===n&&(n=0),n>0?t.prototype.schedule.call(this,e,n):(this.delay=n,this.state=e,this.scheduler.flush(this),this)},n.prototype.execute=function(e,n){return n>0||this.closed?t.prototype.execute.call(this,e,n):this._execute(e,n)},n.prototype.requestAsyncId=function(e,n,r){return void 0===r&&(r=0),null!==r&&r>0||null===r&&this.delay>0?t.prototype.requestAsyncId.call(this,e,n,r):e.flush(this)},n}(function(t){function n(e,n){var r=t.call(this,e,n)||this;return r.scheduler=e,r.work=n,r.pending=!1,r}return e(n,t),n.prototype.schedule=function(t,e){if(void 0===e&&(e=0),this.closed)return this;this.state=t;var n=this.id,r=this.scheduler;return null!=n&&(this.id=this.recycleAsyncId(r,n,e)),this.pending=!0,this.delay=e,this.id=this.id||this.requestAsyncId(r,this.id,e),this},n.prototype.requestAsyncId=function(t,e,n){return void 0===n&&(n=0),setInterval(t.flush.bind(t,this),n)},n.prototype.recycleAsyncId=function(t,e,n){if(void 0===n&&(n=0),null!==n&&this.delay===n&&!1===this.pending)return e;clearInterval(e)},n.prototype.execute=function(t,e){if(this.closed)return new Error("executing a cancelled action");this.pending=!1;var n=this._execute(t,e);if(n)return n;!1===this.pending&&null!=this.id&&(this.id=this.recycleAsyncId(this.scheduler,this.id,null))},n.prototype._execute=function(t,e){var n=!1,r=void 0;try{this.work(t)}catch(t){n=!0,r=!!t&&t||new Error(t)}if(n)return this.unsubscribe(),r},n.prototype._unsubscribe=function(){var t=this.id,e=this.scheduler,n=e.actions,r=n.indexOf(this);this.work=null,this.state=null,this.pending=!1,this.scheduler=null,-1!==r&&n.splice(r,1),null!=t&&(this.id=this.recycleAsyncId(e,t,null)),this.delay=null},n}(function(t){function n(e,n){return t.call(this)||this}return e(n,t),n.prototype.schedule=function(t,e){return this},n}(et))),mt=function(){function t(e,n){void 0===n&&(n=t.now),this.SchedulerAction=e,this.now=n}return t.prototype.schedule=function(t,e,n){return void 0===e&&(e=0),new this.SchedulerAction(this,t).schedule(n,e)},t.now=function(){return Date.now()},t}(),Ot=new(function(t){function n(){return null!==t&&t.apply(this,arguments)||this}return e(n,t),n}(function(t){function n(e,r){void 0===r&&(r=mt.now);var o=t.call(this,e,(function(){return n.delegate&&n.delegate!==o?n.delegate.now():r()}))||this;return o.actions=[],o.active=!1,o.scheduled=void 0,o}return e(n,t),n.prototype.schedule=function(e,r,o){return void 0===r&&(r=0),n.delegate&&n.delegate!==this?n.delegate.schedule(e,r,o):t.prototype.schedule.call(this,e,r,o)},n.prototype.flush=function(t){var e=this.actions;if(this.active)e.push(t);else{var n;this.active=!0;do{if(n=t.execute(t.state,t.delay))break}while(t=e.shift());if(this.active=!1,n){for(;t=e.shift();)t.unsubscribe();throw n}}},n}(mt)))(gt),St=new at((function(t){return t.complete()}));function Tt(t){return t?function(t){return new at((function(e){return t.schedule((function(){return e.complete()}))}))}(t):St}function xt(t){return t&&"function"==typeof t.schedule}function Pt(t,e){return new at((function(n){var r=new et,o=0;return r.add(e.schedule((function(){o!==t.length?(n.next(t[o++]),n.closed||r.add(this.schedule())):n.complete()}))),r}))}function jt(t,e){return e?Pt(t,e):new at((n=t,function(t){for(var e=0,r=n.length;e<r&&!t.closed;e++)t.next(n[e]);t.complete()}));var n}function At(t){var e=t.error;t.subscriber.error(e)}var Nt=function(){function t(t,e,n){this.kind=t,this.value=e,this.error=n,this.hasValue="N"===t}return t.prototype.observe=function(t){switch(this.kind){case"N":return t.next&&t.next(this.value);case"E":return t.error&&t.error(this.error);case"C":return t.complete&&t.complete()}},t.prototype.do=function(t,e,n){switch(this.kind){case"N":return t&&t(this.value);case"E":return e&&e(this.error);case"C":return n&&n()}},t.prototype.accept=function(t,e,n){return t&&"function"==typeof t.next?this.observe(t):this.do(t,e,n)},t.prototype.toObservable=function(){var t,e;switch(this.kind){case"N":return function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var n=t[t.length-1];return xt(n)?(t.pop(),Pt(t,n)):jt(t)}(this.value);case"E":return t=this.error,new at(e?function(n){return e.schedule(At,0,{error:t,subscriber:n})}:function(e){return e.error(t)});case"C":return Tt()}throw new Error("unexpected notification kind value")},t.createNext=function(e){return void 0!==e?new t("N",e):t.undefinedValueNotification},t.createError=function(e){return new t("E",void 0,e)},t.createComplete=function(){return t.completeNotification},t.completeNotification=new t("C"),t.undefinedValueNotification=new t("N",void 0),t}(),Ct=function(t){function n(e,n,r){void 0===r&&(r=0);var o=t.call(this,e)||this;return o.scheduler=n,o.delay=r,o}return e(n,t),n.dispatch=function(t){var e=t.notification,n=t.destination;e.observe(n),this.unsubscribe()},n.prototype.scheduleMessage=function(t){this.destination.add(this.scheduler.schedule(n.dispatch,this.delay,new Mt(t,this.destination)))},n.prototype._next=function(t){this.scheduleMessage(Nt.createNext(t))},n.prototype._error=function(t){this.scheduleMessage(Nt.createError(t)),this.unsubscribe()},n.prototype._complete=function(){this.scheduleMessage(Nt.createComplete()),this.unsubscribe()},n}(ot),Mt=function(){return function(t,e){this.notification=t,this.destination=e}}(),It=function(t){function n(e,n,r){void 0===e&&(e=Number.POSITIVE_INFINITY),void 0===n&&(n=Number.POSITIVE_INFINITY);var o=t.call(this)||this;return o.scheduler=r,o._events=[],o._infiniteTimeWindow=!1,o._bufferSize=e<1?1:e,o._windowTime=n<1?1:n,n===Number.POSITIVE_INFINITY?(o._infiniteTimeWindow=!0,o.next=o.nextInfiniteTimeWindow):o.next=o.nextTimeWindow,o}return e(n,t),n.prototype.nextInfiniteTimeWindow=function(e){var n=this._events;n.push(e),n.length>this._bufferSize&&n.shift(),t.prototype.next.call(this,e)},n.prototype.nextTimeWindow=function(e){this._events.push(new Dt(this._getNow(),e)),this._trimBufferThenGetEvents(),t.prototype.next.call(this,e)},n.prototype._subscribe=function(t){var e,n=this._infiniteTimeWindow,r=n?this._events:this._trimBufferThenGetEvents(),o=this.scheduler,i=r.length;if(this.closed)throw new ft;if(this.isStopped||this.hasError?e=et.EMPTY:(this.observers.push(t),e=new pt(this,t)),o&&t.add(t=new Ct(t,o)),n)for(var s=0;s<i&&!t.closed;s++)t.next(r[s]);else for(s=0;s<i&&!t.closed;s++)t.next(r[s].value);return this.hasError?t.error(this.thrownError):this.isStopped&&t.complete(),e},n.prototype._getNow=function(){return(this.scheduler||Ot).now()},n.prototype._trimBufferThenGetEvents=function(){for(var t=this._getNow(),e=this._bufferSize,n=this._windowTime,r=this._events,o=r.length,i=0;i<o&&!(t-r[i].time<n);)i++;return o>e&&(i=Math.max(i,o-e)),i>0&&r.splice(0,i),r},n}(dt),Dt=function(){return function(t,e){this.time=t,this.value=e}}(),kt=function(){function t(){return Error.call(this),this.message="argument out of range",this.name="ArgumentOutOfRangeError",this}return t.prototype=Object.create(Error.prototype),t}();function Lt(t,e){return function(n){if("function"!=typeof t)throw new TypeError("argument is not a function. Are you looking for `mapTo()`?");return n.lift(new Rt(t,e))}}var Rt=function(){function t(t,e){this.project=t,this.thisArg=e}return t.prototype.call=function(t,e){return e.subscribe(new Ut(t,this.project,this.thisArg))},t}(),Ut=function(t){function n(e,n,r){var o=t.call(this,e)||this;return o.project=n,o.count=0,o.thisArg=r||o,o}return e(n,t),n.prototype._next=function(t){var e;try{e=this.project.call(this.thisArg,t,this.count++)}catch(t){return void this.destination.error(t)}this.destination.next(e)},n}(ot);function Ht(t,e,n,r){return K(n)&&(r=n,n=void 0),r?Ht(t,e,n).pipe(Lt((function(t){return $(t)?r.apply(void 0,t):r(t)}))):new at((function(r){!function t(e,n,r,o,i){var s;if(function(t){return t&&"function"==typeof t.addEventListener&&"function"==typeof t.removeEventListener}(e)){var u=e;e.addEventListener(n,r,i),s=function(){return u.removeEventListener(n,r,i)}}else if(function(t){return t&&"function"==typeof t.on&&"function"==typeof t.off}(e)){var c=e;e.on(n,r),s=function(){return c.off(n,r)}}else if(function(t){return t&&"function"==typeof t.addListener&&"function"==typeof t.removeListener}(e)){var a=e;e.addListener(n,r),s=function(){return a.removeListener(n,r)}}else{if(!e||!e.length)throw new TypeError("Invalid event target");for(var l=0,f=e.length;l<f;l++)t(e[l],n,r,o,i)}o.add(s)}(t,e,(function(t){arguments.length>1?r.next(Array.prototype.slice.call(arguments)):r.next(t)}),r,n)}))}function Ft(t,e){return function(n){return n.lift(new Vt(t,e))}}var Vt=function(){function t(t,e){this.predicate=t,this.thisArg=e}return t.prototype.call=function(t,e){return e.subscribe(new Wt(t,this.predicate,this.thisArg))},t}(),Wt=function(t){function n(e,n,r){var o=t.call(this,e)||this;return o.predicate=n,o.thisArg=r,o.count=0,o}return e(n,t),n.prototype._next=function(t){var e;try{e=this.predicate.call(this.thisArg,t,this.count++)}catch(t){return void this.destination.error(t)}e&&this.destination.next(t)},n}(ot);function Yt(t){return function(e){return 0===t?Tt():e.lift(new Bt(t))}}var Bt=function(){function t(t){if(this.total=t,this.total<0)throw new kt}return t.prototype.call=function(t,e){return e.subscribe(new Gt(t,this.total))},t}(),Gt=function(t){function n(e,n){var r=t.call(this,e)||this;return r.total=n,r.count=0,r}return e(n,t),n.prototype._next=function(t){var e=this.total,n=++this.count;n<=e&&(this.destination.next(t),n===e&&(this.destination.complete(),this.unsubscribe()))},n}(ot);function zt(t,e){return function(n){var r;if(r="function"==typeof t?t:function(){return t},"function"==typeof e)return n.lift(new Kt(r,e));var o=Object.create(n,wt);return o.source=n,o.subjectFactory=r,o}}var qt,Kt=function(){function t(t,e){this.subjectFactory=t,this.selector=e}return t.prototype.call=function(t,e){var n=this.selector,r=this.subjectFactory(),o=n(r).subscribe(t);return o.add(e.subscribe(r)),o},t}();!function(t){t.CONTEXT_UPDATE="context_update",t.FUNCTION_CALL="function_call",t.FUNCTION_CANCEL="function_cancel",t.FUNCTION_RESULT="function_result",t.FUNCTION_ERROR="function_error"}(qt||(qt={}));function Xt(t){return t.type===qt.CONTEXT_UPDATE}function Zt(t){return t.type===qt.FUNCTION_RESULT||t.type===qt.FUNCTION_ERROR}function Jt(){return function(t){return function(t){return"function"==typeof t.connect}(t)?new at((function(e){var n=t.subscribe(e);return t.connect(),n})):t}}var Qt=function(){var t,e=this,i=new at((function(t){return function(){var t=window.parent,e=new MessageChannel,r=e.port1,o=e.port2,i=Ht(r,"message").pipe(Lt((function(t){return n(n({},t.data),{port:r})})));return r.start(),t.postMessage("@frontapp/ui-sdk#WebViewBridge.handshake","*",[o]),i}().subscribe(t)})).pipe(t?zt((function(){return new dt}),t):zt(new dt),Jt()),s=i.pipe(Ft(Xt),function(t,e,n,r){n&&"function"!=typeof n&&(r=n);var o="function"==typeof n?n:void 0,i=new It(t,e,r);return function(t){return zt((function(){return i}),o)(t)}}(1),Jt()),u=function(t,e,n,r,o){return t.postMessage({type:qt.FUNCTION_CALL,id:e,contextId:n,name:r,args:o}),i.pipe(Ft(Zt),Ft((function(t){return t.id===e})),Lt((function(t){switch(t.type){case qt.FUNCTION_RESULT:return t.value;case qt.FUNCTION_ERROR:default:throw new Error(String(t.error))}})),Yt(1))},c=function(t,e){t.postMessage({type:qt.FUNCTION_CANCEL,id:e})},a=s.pipe(Lt((function(t){var e=t.port,n=t.context;return new Proxy(n,{get:function(t,r){var o=String(r),i=t.functionArities[o];return r in t||!Number.isInteger(i)?t[r]:function(){for(var t=[],r=0;r<arguments.length;r++)t[r]=arguments[r];var s=q(),a=i-1,l=t[a],f=t.slice(0,a);return new Promise((function(t,r){var i=u(e,s,n.id,o,f).subscribe({next:t,error:r});l&&l.promise.then((function(){i.closed||(i.unsubscribe(),r(new C),c(e,s))}))}))}}})})));return new Proxy({contextUpdates:a,buildCancelTokenSource:M,isCancelError:function(t){return t instanceof C}},{get:function(t,n){return n in t?t[n]:function(){for(var t=[],i=0;i<arguments.length;i++)t[i]=arguments[i];return new Promise((function(i,s){a.pipe(Yt(1)).subscribe({next:function(u){return r(e,void 0,void 0,(function(){var e,r,c,a;return o(this,(function(o){switch(o.label){case 0:if(void 0===(e=u[n]))return r=String(n)+" is not a valid function for context "+u.type+".",s(new ReferenceError(r)),[2];o.label=1;case 1:return o.trys.push([1,3,,4]),c=i,[4,e.apply(void 0,t)];case 2:return c.apply(void 0,[o.sent()]),[3,4];case 3:return a=o.sent(),s(a),[3,4];case 4:return[2]}}))}))},error:s})}))}}})}(),$t=Qt.contextUpdates;return"undefined"!=typeof window&&$t.pipe(Yt(1)).subscribe(),window.parent!==window.self&&window.addEventListener("click",(function(t){if(0===t.button){var e=t.target,n=e instanceof window.HTMLElement?e.closest("a"):null;if(n&&n.href&&("_blank"===n.target||n.href.startsWith("mailto:"))){var r=new URL(n.href,window.location.href);t.preventDefault(),Qt.openUrl(r.href)}}})),Qt}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
