import { ApplicationCancelTokenSource, ApplicationContext, MessageContext, MultiConversationsContext, NoConversationContext, NoConversationPopoverContext, SingleConversationContext, SingleConversationPopoverContext } from '@frontapp/ui-bridge';
import { Observable } from 'rxjs';
declare type InternalContextProperties = 'hostId' | 'entryPointId';
declare type WebViewContextFunctions = Pick<ApplicationContext, FunctionPropertyNames<ApplicationContext>>;
declare type WebViewSingleConversationContext = Omit<SingleConversationContext, InternalContextProperties>;
declare type WebViewSingleConversationPopoverContext = Omit<SingleConversationPopoverContext, InternalContextProperties>;
declare type WebViewNoConversationContext = Omit<NoConversationContext, InternalContextProperties>;
declare type WebViewNoConversationPopoverContext = Omit<NoConversationPopoverContext, InternalContextProperties>;
declare type WebViewMultipleConversationsContext = Omit<MultiConversationsContext, InternalContextProperties>;
declare type WebViewMessageContext = Omit<MessageContext, InternalContextProperties>;
export declare type WebViewContext = WebViewSingleConversationContext | WebViewNoConversationPopoverContext | WebViewSingleConversationPopoverContext | WebViewNoConversationContext | WebViewMultipleConversationsContext | WebViewMessageContext;
export declare type WebViewBaseBridge = {
    buildCancelTokenSource(): ApplicationCancelTokenSource;
    contextUpdates: Observable<WebViewContext>;
    isCancelError(error: any): boolean;
};
export declare type WebViewBridge = WebViewBaseBridge & WebViewContextFunctions;
export declare enum WebViewMessageTypesEnum {
    CONTEXT_UPDATE = "context_update",
    FUNCTION_CALL = "function_call",
    FUNCTION_CANCEL = "function_cancel",
    FUNCTION_RESULT = "function_result",
    FUNCTION_ERROR = "function_error"
}
interface WebViewContextUpdateMessage {
    type: WebViewMessageTypesEnum.CONTEXT_UPDATE;
    context: WebViewContext;
}
interface WebViewFunctionResultMessage {
    type: WebViewMessageTypesEnum.FUNCTION_RESULT;
    id: string;
    value: unknown;
}
interface WebViewFunctionErrorMessage {
    type: WebViewMessageTypesEnum.FUNCTION_ERROR;
    id: string;
    error: string;
}
export declare type WebViewHostMessage = WebViewContextUpdateMessage | WebViewFunctionResultMessage | WebViewFunctionErrorMessage;
export declare type WebViewHostMessageWithPort = WebViewHostMessage & {
    port: MessagePort;
};
declare type WebViewContextUpdateMessageWithPort = WebViewContextUpdateMessage & {
    port: MessagePort;
};
export declare const webViewBridgeHandshake = "@frontapp/ui-sdk#WebViewBridge.handshake";
interface WebViewFunctionCallMessage {
    type: WebViewMessageTypesEnum.FUNCTION_CALL;
    id: string;
    contextId: string;
    name: string;
    args: ReadonlyArray<unknown>;
}
interface WebViewFunctionCancelMessage {
    type: WebViewMessageTypesEnum.FUNCTION_CANCEL;
    id: string;
}
export declare type WebViewSdkMessage = WebViewFunctionCallMessage | WebViewFunctionCancelMessage;
export declare function isContextUpdateMessageWithPort(message: WebViewHostMessage): message is WebViewContextUpdateMessageWithPort;
export declare function isFunctionResultMessage(message: WebViewHostMessage): message is WebViewFunctionResultMessage | WebViewFunctionErrorMessage;
/** Filter a type to only keep functions properties. */
declare type FunctionPropertyNames<T> = {
    [K in keyof T]: T[K] extends never ? never : T[K] extends (...args: any) => any ? K : never;
}[keyof T];
export {};
