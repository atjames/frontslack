import { Placement } from '@popperjs/core';
import React, { FC } from 'react';
interface SelectProps {
    /** The selected values to render. */
    selectedValues?: string | ReadonlyArray<string>;
    /** Content of the select to render. */
    children: React.ReactNode;
    /** The maximum width of the dropdown. */
    maxWidth?: number;
    /** The minimum height of the dropdown. */
    minHeight?: number;
    /** The maximum height of the dropdown. */
    maxHeight?: number;
    /** Placeholder to render in the button. */
    placeholder?: string;
    /** The empty state message to render. */
    emptyStateMessage?: string;
    /** Controls if the select is disabled. */
    isDisabled?: boolean;
    /** Controls if we should render the loading state. */
    isLoading?: boolean;
    /** Controls if we will try to load more items when they reach the loadingThreshold.  */
    hasMore?: boolean;
    /** Controls the label of the header and if the header is visible. */
    headerLabel?: string;
    /** Placeholder for the search bar. */
    searchPlaceholder?: string;
    /** The value for the search bar input, if this value is supplied we will render the search bar. */
    searchValue?: string;
    /** Specify a different layer id to tie the select to. */
    layerRootId?: string;
    /** Control where the placement of the select is. */
    placement?: Placement;
    /** Called when the search bar value is changed. */
    onSearchChange?: (value: string) => void;
    /** Called when we request to load more items. */
    onLoadMore?: () => Promise<void>;
    /** Called when the select is closed. */
    onSelectClosed?: () => void;
    /** Called when the select is opened. */
    onSelectOpen?: () => void;
}
export declare const Select: FC<SelectProps>;
export {};
