import React, { FC } from 'react';
import { RepositionPopoverProps } from '../../components/popover/repositionPopover';
interface DropdownCoordinatorProps extends Pick<RepositionPopoverProps, 'hasVisibleOverlay' | 'isExclusive' | 'placement'> {
    /** Controls if the dropdown is disabled from opening. If disabled, we will not open anything. */
    isDisabled?: boolean;
    /** Controls if the overlay will close the dropdown. If disabled, we will not close when the overlay is clicked. */
    isOverlayCloseDisabled?: boolean;
    /** Controls whether the dropdown anchor should be inline-block or block. */
    isInline?: boolean;
    /** The max width of the anchor item. */
    maxWidth?: number;
    /** Specify a different layer id to tie the dropdown to. */
    layerRootId?: string;
    /** Render the button that triggers the dropdown. */
    renderButton: (isDropdownOpen: boolean, isDisabled: boolean, buttonRef: (instance: HTMLDivElement | null) => void) => React.ReactNode;
    /** Render the dropdown. */
    renderDropdown: (onCloseDropdown: () => void, buttonWidth: number) => React.ReactNode;
    /** Called when the dropdown is first opened. */
    onDropdownOpen?: () => void;
    /** Called when the dropdown is closed. */
    onDropdownClosed?: () => void;
}
export declare const DropdownCoordinator: FC<DropdownCoordinatorProps>;
export {};
