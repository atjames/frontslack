import React, { FC } from 'react';
declare const importedIcons: {
    Archive: (props: React.SVGAttributes<SVGElement>) => React.ReactElement<React.SVGAttributes<SVGElement>, string | React.JSXElementConstructor<any>>;
    ArchiveFilled: (props: React.SVGAttributes<SVGElement>) => React.ReactElement<React.SVGAttributes<SVGElement>, string | React.JSXElementConstructor<any>>;
    Assign: (props: React.SVGAttributes<SVGElement>) => React.ReactElement<React.SVGAttributes<SVGElement>, string | React.JSXElementConstructor<any>>;
    AssignFilled: (props: React.SVGAttributes<SVGElement>) => React.ReactElement<React.SVGAttributes<SVGElement>, string | React.JSXElementConstructor<any>>;
    AttachmentArchive: (props: React.SVGAttributes<SVGElement>) => React.ReactElement<React.SVGAttributes<SVGElement>, string | React.JSXElementConstructor<any>>;
    AttachmentCalendar: (props: React.SVGAttributes<SVGElement>) => React.ReactElement<React.SVGAttributes<SVGElement>, string | React.JSXElementConstructor<any>>;
    AttachmentCode: (props: React.SVGAttributes<SVGElement>) => React.ReactElement<React.SVGAttributes<SVGElement>, string | React.JSXElementConstructor<any>>;
    AttachmentExcel: (props: React.SVGAttributes<SVGElement>) => React.ReactElement<React.SVGAttributes<SVGElement>, string | React.JSXElementConstructor<any>>;
    AttachmentGeneric: (props: React.SVGAttributes<SVGElement>) => React.ReactElement<React.SVGAttributes<SVGElement>, string | React.JSXElementConstructor<any>>;
    AttachmentImage: (props: React.SVGAttributes<SVGElement>) => React.ReactElement<React.SVGAttributes<SVGElement>, string | React.JSXElementConstructor<any>>;
    AttachmentMusic: (props: React.SVGAttributes<SVGElement>) => React.ReactElement<React.SVGAttributes<SVGElement>, string | React.JSXElementConstructor<any>>;
    AttachmentPdf: (props: React.SVGAttributes<SVGElement>) => React.ReactElement<React.SVGAttributes<SVGElement>, string | React.JSXElementConstructor<any>>;
    AttachmentPowerpoint: (props: React.SVGAttributes<SVGElement>) => React.ReactElement<React.SVGAttributes<SVGElement>, string | React.JSXElementConstructor<any>>;
    AttachmentVideo: (props: React.SVGAttributes<SVGElement>) => React.ReactElement<React.SVGAttributes<SVGElement>, string | React.JSXElementConstructor<any>>;
    AttachmentWord: (props: React.SVGAttributes<SVGElement>) => React.ReactElement<React.SVGAttributes<SVGElement>, string | React.JSXElementConstructor<any>>;
    Calendar: (props: React.SVGAttributes<SVGElement>) => React.ReactElement<React.SVGAttributes<SVGElement>, string | React.JSXElementConstructor<any>>;
    CalendarFilled: (props: React.SVGAttributes<SVGElement>) => React.ReactElement<React.SVGAttributes<SVGElement>, string | React.JSXElementConstructor<any>>;
    CheckmarkCircle: (props: React.SVGAttributes<SVGElement>) => React.ReactElement<React.SVGAttributes<SVGElement>, string | React.JSXElementConstructor<any>>;
    CheckmarkCircleEmpty: (props: React.SVGAttributes<SVGElement>) => React.ReactElement<React.SVGAttributes<SVGElement>, string | React.JSXElementConstructor<any>>;
    CheckmarkBox: (props: React.SVGAttributes<SVGElement>) => React.ReactElement<React.SVGAttributes<SVGElement>, string | React.JSXElementConstructor<any>>;
    Checkmark: (props: React.SVGAttributes<SVGElement>) => React.ReactElement<React.SVGAttributes<SVGElement>, string | React.JSXElementConstructor<any>>;
    ChevronDown: (props: React.SVGAttributes<SVGElement>) => React.ReactElement<React.SVGAttributes<SVGElement>, string | React.JSXElementConstructor<any>>;
    ChevronLeft: (props: React.SVGAttributes<SVGElement>) => React.ReactElement<React.SVGAttributes<SVGElement>, string | React.JSXElementConstructor<any>>;
    ChevronRight: (props: React.SVGAttributes<SVGElement>) => React.ReactElement<React.SVGAttributes<SVGElement>, string | React.JSXElementConstructor<any>>;
    ChevronUp: (props: React.SVGAttributes<SVGElement>) => React.ReactElement<React.SVGAttributes<SVGElement>, string | React.JSXElementConstructor<any>>;
    Close: (props: React.SVGAttributes<SVGElement>) => React.ReactElement<React.SVGAttributes<SVGElement>, string | React.JSXElementConstructor<any>>;
    Copy: (props: React.SVGAttributes<SVGElement>) => React.ReactElement<React.SVGAttributes<SVGElement>, string | React.JSXElementConstructor<any>>;
    Edit: (props: React.SVGAttributes<SVGElement>) => React.ReactElement<React.SVGAttributes<SVGElement>, string | React.JSXElementConstructor<any>>;
    EditFilled: (props: React.SVGAttributes<SVGElement>) => React.ReactElement<React.SVGAttributes<SVGElement>, string | React.JSXElementConstructor<any>>;
    EllipsisHorizontal: (props: React.SVGAttributes<SVGElement>) => React.ReactElement<React.SVGAttributes<SVGElement>, string | React.JSXElementConstructor<any>>;
    EllipsisVertical: (props: React.SVGAttributes<SVGElement>) => React.ReactElement<React.SVGAttributes<SVGElement>, string | React.JSXElementConstructor<any>>;
    Export: (props: React.SVGAttributes<SVGElement>) => React.ReactElement<React.SVGAttributes<SVGElement>, string | React.JSXElementConstructor<any>>;
    ExternalLink: (props: React.SVGAttributes<SVGElement>) => React.ReactElement<React.SVGAttributes<SVGElement>, string | React.JSXElementConstructor<any>>;
    Gear: (props: React.SVGAttributes<SVGElement>) => React.ReactElement<React.SVGAttributes<SVGElement>, string | React.JSXElementConstructor<any>>;
    GearFilled: (props: React.SVGAttributes<SVGElement>) => React.ReactElement<React.SVGAttributes<SVGElement>, string | React.JSXElementConstructor<any>>;
    Import: (props: React.SVGAttributes<SVGElement>) => React.ReactElement<React.SVGAttributes<SVGElement>, string | React.JSXElementConstructor<any>>;
    Info: (props: React.SVGAttributes<SVGElement>) => React.ReactElement<React.SVGAttributes<SVGElement>, string | React.JSXElementConstructor<any>>;
    InfoFilled: (props: React.SVGAttributes<SVGElement>) => React.ReactElement<React.SVGAttributes<SVGElement>, string | React.JSXElementConstructor<any>>;
    Minus: (props: React.SVGAttributes<SVGElement>) => React.ReactElement<React.SVGAttributes<SVGElement>, string | React.JSXElementConstructor<any>>;
    NewContact: (props: React.SVGAttributes<SVGElement>) => React.ReactElement<React.SVGAttributes<SVGElement>, string | React.JSXElementConstructor<any>>;
    Participant: (props: React.SVGAttributes<SVGElement>) => React.ReactElement<React.SVGAttributes<SVGElement>, string | React.JSXElementConstructor<any>>;
    ParticipantFilled: (props: React.SVGAttributes<SVGElement>) => React.ReactElement<React.SVGAttributes<SVGElement>, string | React.JSXElementConstructor<any>>;
    Plus: (props: React.SVGAttributes<SVGElement>) => React.ReactElement<React.SVGAttributes<SVGElement>, string | React.JSXElementConstructor<any>>;
    PlusCircle: (props: React.SVGAttributes<SVGElement>) => React.ReactElement<React.SVGAttributes<SVGElement>, string | React.JSXElementConstructor<any>>;
    Preferences: (props: React.SVGAttributes<SVGElement>) => React.ReactElement<React.SVGAttributes<SVGElement>, string | React.JSXElementConstructor<any>>;
    Search: (props: React.SVGAttributes<SVGElement>) => React.ReactElement<React.SVGAttributes<SVGElement>, string | React.JSXElementConstructor<any>>;
    Star: (props: React.SVGAttributes<SVGElement>) => React.ReactElement<React.SVGAttributes<SVGElement>, string | React.JSXElementConstructor<any>>;
    StarFilled: (props: React.SVGAttributes<SVGElement>) => React.ReactElement<React.SVGAttributes<SVGElement>, string | React.JSXElementConstructor<any>>;
    Trash: (props: React.SVGAttributes<SVGElement>) => React.ReactElement<React.SVGAttributes<SVGElement>, string | React.JSXElementConstructor<any>>;
    TrashFilled: (props: React.SVGAttributes<SVGElement>) => React.ReactElement<React.SVGAttributes<SVGElement>, string | React.JSXElementConstructor<any>>;
};
export declare type IconName = keyof typeof importedIcons;
export declare const icons: {
    Archive: (props: React.SVGAttributes<SVGElement>) => React.ReactElement;
    ArchiveFilled: (props: React.SVGAttributes<SVGElement>) => React.ReactElement;
    Assign: (props: React.SVGAttributes<SVGElement>) => React.ReactElement;
    AssignFilled: (props: React.SVGAttributes<SVGElement>) => React.ReactElement;
    AttachmentArchive: (props: React.SVGAttributes<SVGElement>) => React.ReactElement;
    AttachmentCalendar: (props: React.SVGAttributes<SVGElement>) => React.ReactElement;
    AttachmentCode: (props: React.SVGAttributes<SVGElement>) => React.ReactElement;
    AttachmentExcel: (props: React.SVGAttributes<SVGElement>) => React.ReactElement;
    AttachmentGeneric: (props: React.SVGAttributes<SVGElement>) => React.ReactElement;
    AttachmentImage: (props: React.SVGAttributes<SVGElement>) => React.ReactElement;
    AttachmentMusic: (props: React.SVGAttributes<SVGElement>) => React.ReactElement;
    AttachmentPdf: (props: React.SVGAttributes<SVGElement>) => React.ReactElement;
    AttachmentPowerpoint: (props: React.SVGAttributes<SVGElement>) => React.ReactElement;
    AttachmentVideo: (props: React.SVGAttributes<SVGElement>) => React.ReactElement;
    AttachmentWord: (props: React.SVGAttributes<SVGElement>) => React.ReactElement;
    Calendar: (props: React.SVGAttributes<SVGElement>) => React.ReactElement;
    CalendarFilled: (props: React.SVGAttributes<SVGElement>) => React.ReactElement;
    CheckmarkCircle: (props: React.SVGAttributes<SVGElement>) => React.ReactElement;
    CheckmarkCircleEmpty: (props: React.SVGAttributes<SVGElement>) => React.ReactElement;
    CheckmarkBox: (props: React.SVGAttributes<SVGElement>) => React.ReactElement;
    Checkmark: (props: React.SVGAttributes<SVGElement>) => React.ReactElement;
    ChevronDown: (props: React.SVGAttributes<SVGElement>) => React.ReactElement;
    ChevronLeft: (props: React.SVGAttributes<SVGElement>) => React.ReactElement;
    ChevronRight: (props: React.SVGAttributes<SVGElement>) => React.ReactElement;
    ChevronUp: (props: React.SVGAttributes<SVGElement>) => React.ReactElement;
    Close: (props: React.SVGAttributes<SVGElement>) => React.ReactElement;
    Copy: (props: React.SVGAttributes<SVGElement>) => React.ReactElement;
    Edit: (props: React.SVGAttributes<SVGElement>) => React.ReactElement;
    EditFilled: (props: React.SVGAttributes<SVGElement>) => React.ReactElement;
    EllipsisHorizontal: (props: React.SVGAttributes<SVGElement>) => React.ReactElement;
    EllipsisVertical: (props: React.SVGAttributes<SVGElement>) => React.ReactElement;
    Export: (props: React.SVGAttributes<SVGElement>) => React.ReactElement;
    ExternalLink: (props: React.SVGAttributes<SVGElement>) => React.ReactElement;
    Gear: (props: React.SVGAttributes<SVGElement>) => React.ReactElement;
    GearFilled: (props: React.SVGAttributes<SVGElement>) => React.ReactElement;
    Import: (props: React.SVGAttributes<SVGElement>) => React.ReactElement;
    Info: (props: React.SVGAttributes<SVGElement>) => React.ReactElement;
    InfoFilled: (props: React.SVGAttributes<SVGElement>) => React.ReactElement;
    Minus: (props: React.SVGAttributes<SVGElement>) => React.ReactElement;
    NewContact: (props: React.SVGAttributes<SVGElement>) => React.ReactElement;
    Participant: (props: React.SVGAttributes<SVGElement>) => React.ReactElement;
    ParticipantFilled: (props: React.SVGAttributes<SVGElement>) => React.ReactElement;
    Plus: (props: React.SVGAttributes<SVGElement>) => React.ReactElement;
    PlusCircle: (props: React.SVGAttributes<SVGElement>) => React.ReactElement;
    Preferences: (props: React.SVGAttributes<SVGElement>) => React.ReactElement;
    Search: (props: React.SVGAttributes<SVGElement>) => React.ReactElement;
    Star: (props: React.SVGAttributes<SVGElement>) => React.ReactElement;
    StarFilled: (props: React.SVGAttributes<SVGElement>) => React.ReactElement;
    Trash: (props: React.SVGAttributes<SVGElement>) => React.ReactElement;
    TrashFilled: (props: React.SVGAttributes<SVGElement>) => React.ReactElement;
};
interface IconProps {
    /** The icon to display. */
    name: IconName;
    /** The color of the icon. */
    color?: string;
    /** Controls the width and height of the icon. */
    size?: number;
    /** If set, no color for the icon will be set. This enables inheriting the parents color. */
    shouldDisableColor?: boolean;
}
export declare const Icon: FC<IconProps>;
export {};
