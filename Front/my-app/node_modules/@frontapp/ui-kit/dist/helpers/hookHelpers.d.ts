/// <reference types="react" />
import { Options as UseMeasureOptions, RectReadOnly } from 'react-use-measure';
/** Returns a setTimeout-like function that clears the previous timeout when re-invoked or when the component unmounts. */
export declare function useTimeout(): [(handler: () => void, timeout?: number) => void, () => void];
/** Returns the passed value as it was after the last successful render of the component. */
export declare function usePrevious<T>(value: T): T | null;
export declare function useMeasureElement<T extends HTMLElement = HTMLDivElement>(options?: Omit<UseMeasureOptions, 'polyfill'>): [React.RefCallback<T>, RectReadOnly, () => void];
